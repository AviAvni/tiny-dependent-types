%{
(*
----------------------------------------------------------------------
Copyright (c) 2012 David Raymond Christiansen

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

 * The software is provided "as is", without warranty of any kind,
  express or implied, including but not limited to the warranties of
  merchantability, fitness for a particular purpose and
  noninfringement.  In no event shall the authors or copyright
  holders be liable for any claim, damages or other liability,
  whether in an action of contract, tort or otherwise, arising from,
  out of or in connection with the software or the use or other
  dealings in the software.
----------------------------------------------------------------------
*)
open Nat
open AST

let rec fixVars t = fixVars' [] t
and fixVars' ctx t =
  match t with
    | Bound n -> Bound n
    | Free str -> match List.tryFindIndex (fun x -> x = str) ctx with
                    | Some n -> Bound (natOfInt n)
                    | None   -> Free str
    | Pi (x, t1, t2) -> Pi (x, fixVars' ctx t1, fixVars' (x::ctx) t2)
    | Lambda (x, t1, t2) -> Lambda (x, fixVars' ctx t1, fixVars' (x::ctx) t2)
    | Sigma (x, t1, t2) -> Sigma (x, fixVars' ctx t1, fixVars' (x::ctx) t2)
    | Pair (x, t1, t2) -> Pair (x, fixVars' ctx t1, fixVars' (x::ctx) t2)
    | Fst t -> Fst (fixVars' ctx t)
    | Snd t -> Snd (fixVars' ctx t)
    | App (t1, t2) -> App (fixVars' ctx t1, fixVars' ctx t2)
    | Univ n -> Univ n
    | Postulated (x, ty) -> Postulated (x, ty)
%}

%token <string> ID
%token <string> STRING
%token LAMBDA PI DOT COLON SET LPAR RPAR ARROW UNDERSCORE PIPE MAKE_EQUAL
%token SIGMA LBRAK RBRAK SEMICOLON FST SND
%token CMD_QUIT CMD_POSTULATE CMD_SHOWSTATE CMD_LOAD
%token CMD_DATADEF CMD_DEF
%token SEPARATOR
%token EOF

%start parse
%start command
%start file
%type <command> parse
%type <command> command
%type <command list> file
%type <term> exprTop

%%

parse:
  | command EOF                     { $1                   }


command:
  | CMD_QUIT                        { Quit                 }
  | CMD_SHOWSTATE                   { ShowState            }
  | file_cmd                        { $1                   }

file_cmd:
  | exprTop                            { Eval $1              }
  | CMD_POSTULATE ID COLON exprTop     { Postulate ($2, $4)   }
  | CMD_LOAD filename                  { Load $2              }
  | CMD_DATADEF ID COLON exprTop cases { DataDef ($2, $4, $5) }
  | CMD_DEF ID MAKE_EQUAL exprTop      { Def ($2, $4)         }

file:
  | file_cmd SEPARATOR file         { $1 :: $3             }
  | file_cmd EOF                    { [$1]                 }

cases:
  |                                 { []                   }
  | case cases                      { $1 :: $2             }
case:
  | PIPE ID COLON expr              { Case ($2, $4)        }

filename:
  | STRING                          { $1                   }

exprTop:
  | expr                            { fixVars $1           }

expr:
  | atom                            { $1                   }
  | arrow                           { $1                   }
  | application                     { $1                   }

arrow:
  | atom                            { $1                   }
  | atom ARROW arrow                { Pi ("_", $1, $3)     }

atom:
  | LPAR expr RPAR                  { $2                   }
  | ID                              { Free $1              }
  | PI     ID COLON expr DOT expr   { Pi  ($2, $4, $6)     }
  | LAMBDA ID COLON expr DOT expr   { Lambda ($2, $4, $6)  }
  | SIGMA ID COLON expr DOT expr    { Sigma ($2, $4, $6)   }
  | LBRAK ID PIPE expr SEMICOLON expr RBRAK
                                    { Pair ($2, $4, $6)    }
  | SET                             { Univ Z               }

application:
  | atom atom                       { App ($1, $2)         }
  | application atom                { App ($1, $2)         }
  | FST expr                        { Fst ($2)             }
  | SND expr                        { Snd ($2)             }


%%
