{
module Lexical

open Microsoft.FSharp.Text.Lexing
open Grammar

let lexemeAsString lexbuf =
    LexBuffer<char>.LexemeString lexbuf

let keyword s =
    match s with
    | "Set"    -> SET
    | "forall" -> PI
    | _        -> ID s

let mkString (s : string) =
  STRING (s.Substring(1, s.Length - 2))
}

let letter      = ['a'-'z' 'A'-'Z']
let digit       = ['0'-'9']
let space       = [' ' '\t']
let filenamechar = ['a'-'z' 'A'-'Z' '/' '0'-'9' ' ' '_']
let quote       = '\"'
let newline     = "\n\r" | '\n' | '\r'
let lambda      = '\\' | 'λ'

rule token = parse
  | space|newline         { token lexbuf }
  | letter(letter|digit)* { keyword (lexemeAsString lexbuf) }
  | quote filenamechar+ quote { mkString (lexemeAsString lexbuf) }
  | lambda                { LAMBDA }
  | 'Π'                   { PI     }
  | '.'                   { DOT }
  | "->"                  { ARROW }
  | eof                   { EOF }
  | ":="                  { MAKE_EQUAL }
  | ':'                   { COLON }
  | '|'                   { PIPE  }
  | newline newline       { SEPARATOR }
  | ":q" | ":quit"        { CMD_QUIT      }
  | ":p" | ":postulate"   { CMD_POSTULATE }
  | ":s" | ":showstate"   { CMD_SHOWSTATE }
  | ":data"               { CMD_DATADEF   }
  | ":define" | ":def"    { CMD_DEF       }
  | ":l" | ":load"        { CMD_LOAD      }
  | '('                   { LPAR }
  | ')'                   { RPAR }
  | '_'                   { UNDERSCORE }

